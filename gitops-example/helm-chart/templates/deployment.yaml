apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "python-cicd-app.fullname" . }}
  labels:
    {{- include "python-cicd-app.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "python-cicd-app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.monitoring.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "{{ .Values.monitoring.prometheus.port }}"
        prometheus.io/path: "{{ .Values.monitoring.prometheus.path }}"
        {{- end }}
        {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "python-cicd-app.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "python-cicd-app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.targetPort }}
              protocol: TCP
            {{- if .Values.monitoring.enabled }}
            - name: metrics
              containerPort: {{ .Values.monitoring.prometheus.port }}
              protocol: TCP
            {{- end }}
          env:
            - name: DEBUG
              valueFrom:
                configMapKeyRef:
                  name: {{ include "python-cicd-app.fullname" . }}-config
                  key: debug
            - name: LOG_LEVEL
              valueFrom:
                configMapKeyRef:
                  name: {{ include "python-cicd-app.fullname" . }}-config
                  key: logLevel
            {{- if and .Values.secrets.enabled .Values.secrets.manual.database.enabled }}
            - name: DATABASE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: {{ include "python-cicd-app.fullname" . }}-secrets
                  key: database-username
            - name: DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "python-cicd-app.fullname" . }}-secrets
                  key: database-password
            {{- end }}
            {{- if and .Values.secrets.enabled .Values.secrets.manual.apiKeys.enabled }}
            - name: EXTERNAL_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ include "python-cicd-app.fullname" . }}-secrets
                  key: external-api-key
            {{- end }}
          {{- if .Values.healthCheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: {{ .Values.healthCheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.healthCheck.periodSeconds }}
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: {{ .Values.healthCheck.failureThreshold }}
          readinessProbe:
            httpGet:
              path: {{ .Values.healthCheck.path }}
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
            timeoutSeconds: {{ .Values.healthCheck.timeoutSeconds }}
            failureThreshold: 3
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - name: tmp
              mountPath: /tmp
            - name: var-run
              mountPath: /var/run
      volumes:
        - name: tmp
          emptyDir: {}
        - name: var-run
          emptyDir: {}
      {{- if .Values.performance.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.performance.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if and .Values.performance.topologySpreadConstraints.enabled (gt (int .Values.replicaCount) 1) }}
      topologySpreadConstraints:
        - maxSkew: {{ .Values.performance.topologySpreadConstraints.maxSkew }}
          topologyKey: {{ .Values.performance.topologySpreadConstraints.topologyKey }}
          whenUnsatisfiable: {{ .Values.performance.topologySpreadConstraints.whenUnsatisfiable }}
          labelSelector:
            matchLabels:
              {{- include "python-cicd-app.selectorLabels" . | nindent 14 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}