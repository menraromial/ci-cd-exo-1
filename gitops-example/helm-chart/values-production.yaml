# Production environment values
replicaCount: 3

image:
  tag: "latest"

resources:
  limits:
    cpu: 1000m
    memory: 1Gi
    ephemeral-storage: 2Gi
  requests:
    cpu: 100m
    memory: 128Mi
    ephemeral-storage: 1Gi

autoscaling:
  enabled: true
  minReplicas: 3
  maxReplicas: 20
  targetCPUUtilizationPercentage: 70
  targetMemoryUtilizationPercentage: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 25
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30

app:
  debug: false
  logLevel: "WARNING"

monitoring:
  enabled: true
  prometheus:
    enabled: true
  serviceMonitor:
    enabled: true
    namespace: monitoring
  grafana:
    enabled: true
    dashboards:
      enabled: true

networkPolicy:
  enabled: true
  ingress:
    enabled: true
    from:
      - namespaceSelector:
          matchLabels:
            name: ingress-nginx
      - namespaceSelector:
          matchLabels:
            name: monitoring
  egress:
    enabled: true

podDisruptionBudget:
  enabled: true
  minAvailable: 2

performance:
  terminationGracePeriodSeconds: 60
  topologySpreadConstraints:
    enabled: true
    maxSkew: 1
    topologyKey: "kubernetes.io/hostname"
    whenUnsatisfiable: DoNotSchedule

# Production-specific configurations
ingress:
  enabled: true
  className: "nginx"
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
  hosts:
    - host: python-app.example.com
      paths:
        - path: /
          pathType: Prefix
  tls:
    - secretName: python-app-prod-tls
      hosts:
        - python-app.example.com

secrets:
  enabled: true
  externalSecrets:
    enabled: true
    secretStore:
      name: "vault-production"
      kind: "SecretStore"

# Production security enhancements
podSecurityContext:
  fsGroup: 1001
  runAsGroup: 1001
  runAsNonRoot: true
  runAsUser: 1001
  seccompProfile:
    type: RuntimeDefault
  supplementalGroups: []

securityContext:
  allowPrivilegeEscalation: false
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1001
  runAsGroup: 1001
  seccompProfile:
    type: RuntimeDefault

# Node affinity for production workloads
affinity:
  nodeAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      preference:
        matchExpressions:
        - key: node-type
          operator: In
          values:
          - production
  podAntiAffinity:
    preferredDuringSchedulingIgnoredDuringExecution:
    - weight: 100
      podAffinityTerm:
        labelSelector:
          matchExpressions:
          - key: app.kubernetes.io/name
            operator: In
            values:
            - python-cicd-app
        topologyKey: kubernetes.io/hostname