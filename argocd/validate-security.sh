#!/bin/bash

# Script de validation de la s√©curit√© du pipeline CI/CD
# Ce script v√©rifie que toutes les mesures de s√©curit√© sont correctement impl√©ment√©es

# Ne pas arr√™ter sur les erreurs pour permettre de compter tous les √©checs
# set -e

echo "üîí Validation de la s√©curit√© du pipeline CI/CD"
echo "=============================================="

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction pour afficher les r√©sultats
print_result() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
    else
        echo -e "${RED}‚ùå $2${NC}"
    fi
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

# Compteurs
PASSED=0
FAILED=0
WARNINGS=0

echo ""
echo "1. Validation des workflows GitHub Actions"
echo "----------------------------------------"

# V√©rifier la pr√©sence des workflows
if [ -f ".github/workflows/test-and-merge.yml" ] && [ -f ".github/workflows/build-and-deploy.yml" ]; then
    print_result 0 "Workflows GitHub Actions pr√©sents"
    ((PASSED++))
else
    print_result 1 "Workflows GitHub Actions manquants"
    ((FAILED++))
fi

# V√©rifier les permissions minimales dans les workflows
if grep -q "permissions:" .github/workflows/test-and-merge.yml && grep -q "contents: read" .github/workflows/test-and-merge.yml; then
    print_result 0 "Permissions minimales configur√©es dans test-and-merge.yml"
    ((PASSED++))
else
    print_result 1 "Permissions minimales non configur√©es dans test-and-merge.yml"
    ((FAILED++))
fi

if grep -q "permissions:" .github/workflows/build-and-deploy.yml && grep -q "contents: read" .github/workflows/build-and-deploy.yml; then
    print_result 0 "Permissions minimales configur√©es dans build-and-deploy.yml"
    ((PASSED++))
else
    print_result 1 "Permissions minimales non configur√©es dans build-and-deploy.yml"
    ((FAILED++))
fi

# V√©rifier la pr√©sence du scan de vuln√©rabilit√©s
if grep -q "trivy-action" .github/workflows/build-and-deploy.yml; then
    print_result 0 "Scan de vuln√©rabilit√©s Trivy configur√©"
    ((PASSED++))
else
    print_result 1 "Scan de vuln√©rabilit√©s Trivy manquant"
    ((FAILED++))
fi

# V√©rifier la pr√©sence des outils de s√©curit√© statique
if grep -q "bandit" .github/workflows/test-and-merge.yml && grep -q "safety" .github/workflows/test-and-merge.yml; then
    print_result 0 "Outils de s√©curit√© statique (bandit, safety) configur√©s"
    ((PASSED++))
else
    print_result 1 "Outils de s√©curit√© statique manquants"
    ((FAILED++))
fi

echo ""
echo "2. Validation du Dockerfile"
echo "-------------------------"

# V√©rifier l'utilisateur non-root
if grep -q "useradd.*appuser" Dockerfile && grep -q "USER appuser" Dockerfile; then
    print_result 0 "Utilisateur non-root configur√© dans le Dockerfile"
    ((PASSED++))
else
    print_result 1 "Utilisateur non-root manquant dans le Dockerfile"
    ((FAILED++))
fi

# V√©rifier les mises √† jour de s√©curit√©
if grep -q "apt-get update.*apt-get upgrade" Dockerfile; then
    print_result 0 "Mises √† jour de s√©curit√© configur√©es dans le Dockerfile"
    ((PASSED++))
else
    print_result 1 "Mises √† jour de s√©curit√© manquantes dans le Dockerfile"
    ((FAILED++))
fi

# V√©rifier les labels de s√©curit√©
if grep -q "LABEL.*security" Dockerfile; then
    print_result 0 "Labels de s√©curit√© pr√©sents dans le Dockerfile"
    ((PASSED++))
else
    print_result 1 "Labels de s√©curit√© manquants dans le Dockerfile"
    ((FAILED++))
fi

echo ""
echo "3. Validation des configurations Helm"
echo "-----------------------------------"

# V√©rifier la pr√©sence des templates de s√©curit√©
if [ -f "gitops-example/helm-chart/templates/networkpolicy.yaml" ]; then
    print_result 0 "Template NetworkPolicy pr√©sent"
    ((PASSED++))
else
    print_result 1 "Template NetworkPolicy manquant"
    ((FAILED++))
fi

if [ -f "gitops-example/helm-chart/templates/poddisruptionbudget.yaml" ]; then
    print_result 0 "Template PodDisruptionBudget pr√©sent"
    ((PASSED++))
else
    print_result 1 "Template PodDisruptionBudget manquant"
    ((FAILED++))
fi

if [ -f "gitops-example/helm-chart/templates/secret.yaml" ]; then
    print_result 0 "Template Secret pr√©sent"
    ((PASSED++))
else
    print_result 1 "Template Secret manquant"
    ((FAILED++))
fi

# V√©rifier le security context dans values.yaml
if grep -q "runAsNonRoot: true" gitops-example/helm-chart/values.yaml && grep -q "runAsUser: 1001" gitops-example/helm-chart/values.yaml; then
    print_result 0 "Security context configur√© dans values.yaml"
    ((PASSED++))
else
    print_result 1 "Security context manquant dans values.yaml"
    ((FAILED++))
fi

# V√©rifier la configuration des network policies
if grep -q "networkPolicy:" gitops-example/helm-chart/values.yaml && grep -q "enabled: true" gitops-example/helm-chart/values.yaml; then
    print_result 0 "Network policies configur√©es dans values.yaml"
    ((PASSED++))
else
    print_result 1 "Network policies manquantes dans values.yaml"
    ((FAILED++))
fi

echo ""
echo "4. Validation des configurations ArgoCD"
echo "-------------------------------------"

# V√©rifier la pr√©sence des configurations ArgoCD
if [ -f "argocd/application.yaml" ] && [ -f "argocd/project.yaml" ]; then
    print_result 0 "Configurations ArgoCD pr√©sentes"
    ((PASSED++))
else
    print_result 1 "Configurations ArgoCD manquantes"
    ((FAILED++))
fi

# V√©rifier les restrictions de repositories dans le projet
if grep -q "sourceReposDeny" argocd/project.yaml; then
    print_result 0 "Restrictions de repositories configur√©es"
    ((PASSED++))
else
    print_result 1 "Restrictions de repositories manquantes"
    ((FAILED++))
fi

# V√©rifier les ressources blacklist√©es
if grep -q "namespaceResourceBlacklist" argocd/project.yaml; then
    print_result 0 "Ressources blacklist√©es configur√©es"
    ((PASSED++))
else
    print_result 1 "Ressources blacklist√©es manquantes"
    ((FAILED++))
fi

# V√©rifier les sync windows de s√©curit√©
if grep -q "Production changes require manual approval" argocd/project.yaml; then
    print_result 0 "Fen√™tres de synchronisation s√©curis√©es configur√©es"
    ((PASSED++))
else
    print_result 1 "Fen√™tres de synchronisation s√©curis√©es manquantes"
    ((FAILED++))
fi

echo ""
echo "5. Validation de la documentation"
echo "-------------------------------"

# V√©rifier la pr√©sence de la documentation de s√©curit√©
if [ -f "docs/security-implementation.md" ]; then
    print_result 0 "Documentation de s√©curit√© pr√©sente"
    ((PASSED++))
else
    print_result 1 "Documentation de s√©curit√© manquante"
    ((FAILED++))
fi

if [ -f "docs/github-secrets-setup.md" ]; then
    print_result 0 "Documentation des secrets GitHub pr√©sente"
    ((PASSED++))
else
    print_result 1 "Documentation des secrets GitHub manquante"
    ((FAILED++))
fi

echo ""
echo "6. V√©rifications suppl√©mentaires"
echo "------------------------------"

# V√©rifier qu'il n'y a pas de secrets hardcod√©s dans le code
if find . -name "*.py" -o -name "*.yaml" -o -name "*.yml" | xargs grep -l "password\|secret\|token\|key" | grep -v "docs/" | grep -v "README" | grep -v ".git/" > /dev/null 2>&1; then
    print_warning "Possibles secrets d√©tect√©s dans le code - v√©rification manuelle requise"
    ((WARNINGS++))
else
    print_result 0 "Aucun secret apparent d√©tect√© dans le code"
    ((PASSED++))
fi

# V√©rifier la pr√©sence de .gitignore pour √©viter les commits de secrets
if [ -f ".gitignore" ] && grep -q "*.env" .gitignore; then
    print_result 0 "Fichier .gitignore configur√© pour √©viter les secrets"
    ((PASSED++))
else
    print_result 1 "Fichier .gitignore manquant ou incomplet"
    ((FAILED++))
fi

echo ""
echo "=============================================="
echo "üìä R√©sum√© de la validation de s√©curit√©"
echo "=============================================="
echo -e "${GREEN}‚úÖ Tests r√©ussis: $PASSED${NC}"
echo -e "${RED}‚ùå Tests √©chou√©s: $FAILED${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  Avertissements: $WARNINGS${NC}"

TOTAL=$((PASSED + FAILED))
if [ $TOTAL -gt 0 ]; then
    PERCENTAGE=$((PASSED * 100 / TOTAL))
    echo "üìà Score de s√©curit√©: $PERCENTAGE%"
fi

echo ""
if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ Toutes les v√©rifications de s√©curit√© sont pass√©es avec succ√®s!${NC}"
    if [ $WARNINGS -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Veuillez examiner les avertissements ci-dessus.${NC}"
    fi
    exit 0
else
    echo -e "${RED}üö® Des probl√®mes de s√©curit√© ont √©t√© d√©tect√©s. Veuillez les corriger avant de continuer.${NC}"
    exit 1
fi