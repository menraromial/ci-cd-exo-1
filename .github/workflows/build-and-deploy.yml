name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch: # Permet de déclencher manuellement le workflow
    inputs:
      reason:
        description: "Reason for manual deployment"
        required: false
        default: "Manual deployment"

# Global permissions - minimal by default
permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write # Pour pusher vers GitHub Container Registry
      security-events: write # Pour uploader les résultats de scan de sécurité
      actions: read # Pour accéder aux caches GitHub Actions

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1
          provenance: true
          sbom: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          vuln-type: "os,library"
          severity: "CRITICAL,HIGH"

      - name: Validate production configuration
        run: |
          python scripts/validate_production_config.py

      - name: Generate image digest
        id: image
        run: |
          echo "digest=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ steps.build.outputs.digest }}" >> $GITHUB_OUTPUT
          echo "tag=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}" >> $GITHUB_OUTPUT

  update-gitops:
    needs: build-and-push
    runs-on: ubuntu-latest
    permissions:
      contents: write # Pour cloner et modifier le repository GitOps

    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Update Helm values (local)
        run: |
          # Create or update local helm values for demonstration
          mkdir -p helm-chart
          if [ ! -f helm-chart/values.yaml ]; then
            cat > helm-chart/values.yaml << EOF
          image:
            repository: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
            tag: main-${{ github.sha }}
            pullPolicy: IfNotPresent

          service:
            type: ClusterIP
            port: 5000

          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 256Mi
          EOF
          else
            # Update existing values.yaml
            sed -i "s|tag:.*|tag: main-${{ github.sha }}|g" helm-chart/values.yaml
          fi

      - name: Commit updated values (if GitOps repo exists)
        run: |
          # This step would update a GitOps repository if it exists
          # For now, we'll just create a deployment summary
          echo "Image tag updated to: main-${{ github.sha }}"
        continue-on-error: true

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Image**: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch**: main" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ✅ Build completed successfully" >> $GITHUB_STEP_SUMMARY
          echo "- **Next Steps**: Deploy to Kubernetes using ArgoCD" >> $GITHUB_STEP_SUMMARY
